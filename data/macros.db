{"name":"Show Toolbox","type":"script","author":"nCxEX2TJRoY6TBtj","img":"modules/data-toolbox/icons/toolbox.png","scope":"global","command":"dtShowToolbox();","folder":null,"sort":0,"flags":{"core":{"sourceId":"Compendium.data-toolbox.data-macros.6dPmx5EELee0g2jS"}},"_id":"4gwSs9naxlKURhgE","ownership":{"default":0,"FgnRmbsZ0zuxNbBw":3,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"name":"Toggle UI","type":"script","author":"nCxEX2TJRoY6TBtj","img":"icons/svg/dice-target.svg","scope":"global","command":"if(_levels.UI.rendered){\n_levels.UI.close();\n}else{\n_levels.UI.render(true);\n}","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.aRZlPNZAwbvM4QRb"}},"_id":"7lifUqXsVvqxTomD","ownership":{"default":0,"Cspu3pxFr7tu7SU7":3,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"9ikdfHbjq5VPohyS","name":"Basic Torch","type":"script","author":"nCxEX2TJRoY6TBtj","img":"icons/svg/light.svg","scope":"global","command":"const ld={\"config\":{\"dim\":20,\"bright\":40,\"angle\":360,\"color\":\"#dd1203\",\"alpha\":0.25,\"darkness\":{\"min\":1,\"max\":1},\"animation\":{\"type\":\"torch\",\"speed\":5,\"reverse\":false,\"intensity\":1},\"coloration\":1,\"luminosity\":0.5,\"gradual\":true,\"saturation\":0,\"contrast\":0,\"shadows\":0},\"rotation\":0,\"walls\":true,\"vision\":false};\nLightTemplates.activate(this.id,ld);","folder":null,"sort":0,"flags":{"df-architect":{"isLightTemplate":true}},"ownership":{"default":0,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"name":"move-token","type":"script","author":"nCxEX2TJRoY6TBtj","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will move the selected token to the designated position\r\n * Takes X and Y as arguments for the position (in pixels)\r\n * A third, optional, argument, if set to true, will disable the movement animation\r\n * Example: /move-token 1000 1500 false\r\n */\r\n\r\nconst x = args[0];\r\nconst y = args[1];\r\nconst noAnimate = args[2];\r\n\r\nif (!token) return;\r\nif (noAnimate) token._noAnimate = true;\r\nawait token.document.update({x, y})\r\ntoken._noAnimate = false;","folder":null,"sort":100001,"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.rMOgmYRkV0AZ1sjc"}},"_id":"BbLfUBD6cP9fFBzP","ownership":{"FRJk2q4bH9IdLZDf":3,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"name":"Update Weather","type":"script","author":"nCxEX2TJRoY6TBtj","img":"icons/svg/clockwork.svg","scope":"global","command":"Hooks.call(\"fxmaster.updateParticleEffects\", [\n  {\n    type: \"clouds\",\n    options: {\n      density: 0.03,\n      speed: 1,\n      scale: 1,\n      tint: {value: \"#FF0000FF\", apply: true},\n      direction: 50\n    }\n  }\n]);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Compendium.fxmaster.fxmaster.Gx6a4ONkHSXmO9Sj"}},"_id":"Cqv4el0MffxvTjsj","ownership":{"default":0,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":"starwarsffg","systemVersion":"1.80-alpha5","coreVersion":"10.288","createdTime":null,"modifiedTime":1668264513589,"lastModifiedBy":"nCxEX2TJRoY6TBtj"}}
{"name":"Torch: Animated","type":"script","author":"nCxEX2TJRoY6TBtj","img":"https://assets.forge-vtt.com/bazaar/core/icons/sundries/lights/torch-brown.webp","scope":"global","command":"const ld={\"rotation\":0,\"walls\":true,\"vision\":false,\"config\":{\"alpha\":0.49,\"angle\":360,\"bright\":20,\"dim\":40,\"coloration\":1,\"gradual\":true,\"luminosity\":0.5,\"saturation\":0,\"contrast\":0,\"shadows\":0,\"animation\":{\"type\":\"torch\",\"speed\":5,\"intensity\":5,\"reverse\":false},\"darkness\":{\"min\":0,\"max\":1}}};\nLightTemplates.activate(this.id,ld);","folder":null,"sort":0,"flags":{"df-architect":{"isLightTemplate":true},"core":{"sourceId":"Macro.SRQWV9mwu9pi3BkN"}},"ownership":{"default":0,"fNZjpNgGYYmGsPdG":3,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":"starwarsffg","systemVersion":"1.80-alpha5","coreVersion":"10.288","createdTime":1668264695454,"modifiedTime":1668264695454,"lastModifiedBy":"nCxEX2TJRoY6TBtj"},"_id":"EahV1amMaxeu263u"}
{"name":"Whisper Players","type":"script","author":"nCxEX2TJRoY6TBtj","img":"icons/svg/dice-target.svg","scope":"global","command":"/** \n * Provides a dialog to whisper specific players. If you have tokens selected, it will automatically default to try and whisper those players.\n * @Author: Nelson#3570\n */\n\nlet applyChanges = false;\n\nlet users = game.users.filter(user => user.active);\nlet checkOptions = \"\"\nlet playerTokenIds = users.map(u => u.character?.id).filter(id => id !== undefined);\nlet selectedPlayerIds = canvas.tokens.controlled.map(token => {\n  if (playerTokenIds.includes(token.actor.id)) return token.actor.id;\n});\n\n// Build checkbox list for all active players\nusers.forEach(user => {\n  let checked = !!user.character && selectedPlayerIds.includes(user.character.id) && 'checked';\n  checkOptions+=`\n    <br>\n    <input type=\"checkbox\" name=\"${user.id}\" id=\"${user.id}\" value=\"${user.name}\" ${checked}>\\n\n    <label for=\"${user.id}\">${user.name}</label>\n  `\n});\n\nnew Dialog({\n  title:\"Whisper\",\n  content:`Whisper To: ${checkOptions} <br>\n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"></textarea><br>`,\n  buttons:{\n    whisper:{   \n      label:\"Whisper\",\n      callback: (html) => createMessage(html)\n    }\n  }\n}).render(true);\n\nfunction createMessage(html) {\n  var targets = [];\n  // build list of selected players ids for whispers target\n  for ( let user of users ) {\n    if (html.find('[name=\"'+user.id+'\"]')[0].checked){\n      applyChanges=true;\n      targets.push(user.id);\n    }\n    var messageText = html.find('[name=\"message\"]')[0].value\n  }\nif(!applyChanges)return;\n  ChatMessage.create({\n    content: messageText,\n    whisper: targets\n  });\n}","folder":null,"sort":0,"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-misc.QTDeg4HOYCAmr4dK"}},"_id":"Qt60JQnRK8zYSDuQ","ownership":{"default":0,"nCxEX2TJRoY6TBtj":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"name":"Critical Roll","type":"script","author":"nCxEX2TJRoY6TBtj","img":"icons/svg/dice-target.svg","scope":"global","command":"const tables = game.tables.map(table => {\n    if (table.data.name.includes(\"Critical\")) {\n        if (actor != null && ((token.actor.data.type === \"vehicle\" && table.data.name === \"Critical Damage\") || (token.actor.data.type === \"character\" && table.data.name === \"Critical Injuries\"))) {\n            return `<option value=\"${table.data._id}\" selected>${table.data.name}</option>`;\n        } else {\n            return `<option value=\"${table.data._id}\">${table.data.name}</option>`;\n        }\n    }\n})\n\nvar modifier = 0;\nvar durableRank = 0;\n\n//See if an actor is selected\nif (actor) {\n    if (token.actor.data.token.actorLink) {\n        //Make sure we reference the real actor and not a copy of it\n        var realActor = game.actors.get(actor.id);\n        //Count the number of injuries the character already has\n        modifier = realActor.items.filter(item => item.data.type === \"criticalinjury\" || item.data.type === \"criticaldamage\").length * 10;\n        //check to see if the character has the Durable talent\n        console.log(realActor);\n        var durableTalent = realActor.data.data.talentList.filter(item => item.name.toLowerCase() === \"durable\");\n        //If the talent is found multiply it by 10 for the roll\n        if (durableTalent.length > 0) {\n            durableRank = durableTalent[0].rank * 10;\n        }\n\n    } else {\n        var realActor = token.actor;\n        //Count the number of injuries the token already has\n        modifier = token.actor.items.filter(item => item.data.type === \"criticalinjury\" || item.data.type === \"criticaldamage\").length * 10;\n        //check to see if the token has the Durable talent\n        var durableTalent = token.actor.items.filter(item => item.data.name.toLowerCase() === \"durable\");\n        //If the talent is found multiply it by 10 for the roll\n        if (durableTalent.length > 0) {\n            durableRank = durableTalent[0].data.data.ranks.current * 10;\n        }\n    }\n}\n\nlet d = new Dialog({\n    title: \"Critical Roll\",\n    content: `<p>Select table and modifier</p>\n    <div class=\"grid grid-3col\">\n      <div>Modifier: \n        <input name=\"modifier\" class=\"modifier\" style=\"width:50%\" type=\"text\" placeholder=\"` + modifier + `\" value=\"` + modifier + `\" data-dtype=\"String\" />\n      </div>\n      <div>Durable: ` + durableRank + `\n      </div>\n      <div>\n        Table: <select class=\"crittable\">${tables.join(\"\")}</select>\n      </div>\n    </div>`,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Roll Critical\",\n            callback: (html) => {\n                let modifier;\n                modifier = parseInt(html.find(\".modifier\").val(), 10);\n                if (isNaN(modifier)) {\n                    modifier = 0;\n                }\n                const table = html.find(\".crittable :selected\").val();\n                //Added in the Durable modifications as well as making sure it doesn't roll below 1\n                const critRoll = new Roll(`max(1d100 + ${modifier} - ${durableRank}, 1)`);\n                const tableResult = game.tables.get(table).draw({\n                    roll: critRoll,\n                    displayChat: true\n                });\n                //If we have an actor selected try to add the injury\n                if (realActor) {\n                    //Table roles are async so wait for it to return\n                    tableResult.then(function (value) {\n                        //Ignore if we didn't draw a result\n                        if (value.results.length <= 0) {\n                            return;\n                        }\n\n                        var firstResult = value.results[0];\n                        var item = game.items.get(firstResult.data.resultId);\n                        if (item != null) {\n                            //Add injury to the selected chracter\n                            realActor.createEmbeddedDocuments(\"Item\", [item.toObject()]);\n                            ChatMessage.create({\n                                speaker: { alias: realActor.name, token: realActor.id },\n                                content: item.data.data.description\n                            })\n                        }\n                    });\n                }\n            }\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => console.log(\"Chose Two\")\n        }\n    },\n    default: \"two\",\n    close: () => console.log(\"This always is logged no matter which option is chosen\")\n});\nd.render(true);","folder":null,"sort":0,"ownership":{"default":3},"flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""}},"_stats":{"systemId":"starwarsffg","systemVersion":"1.80-alpha5","coreVersion":"10.288","createdTime":1668519398817,"modifiedTime":1671394990247,"lastModifiedBy":"nCxEX2TJRoY6TBtj"},"_id":"alW035nrjp8DLzgX"}
